"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/querystringify";
exports.ids = ["vendor-chunks/querystringify"];
exports.modules = {

/***/ "(rsc)/./node_modules/querystringify/index.js":
/*!**********************************************!*\
  !*** ./node_modules/querystringify/index.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nvar has = Object.prototype.hasOwnProperty, undef;\n/**\n * Decode a URI encoded string.\n *\n * @param {String} input The URI encoded string.\n * @returns {String|Null} The decoded string.\n * @api private\n */ function decode(input) {\n    try {\n        return decodeURIComponent(input.replace(/\\+/g, \" \"));\n    } catch (e) {\n        return null;\n    }\n}\n/**\n * Attempts to encode a given input.\n *\n * @param {String} input The string that needs to be encoded.\n * @returns {String|Null} The encoded string.\n * @api private\n */ function encode(input) {\n    try {\n        return encodeURIComponent(input);\n    } catch (e) {\n        return null;\n    }\n}\n/**\n * Simple query string parser.\n *\n * @param {String} query The query string that needs to be parsed.\n * @returns {Object}\n * @api public\n */ function querystring(query) {\n    var parser = /([^=?#&]+)=?([^&]*)/g, result = {}, part;\n    while(part = parser.exec(query)){\n        var key = decode(part[1]), value = decode(part[2]);\n        //\n        // Prevent overriding of existing properties. This ensures that build-in\n        // methods like `toString` or __proto__ are not overriden by malicious\n        // querystrings.\n        //\n        // In the case if failed decoding, we want to omit the key/value pairs\n        // from the result.\n        //\n        if (key === null || value === null || key in result) continue;\n        result[key] = value;\n    }\n    return result;\n}\n/**\n * Transform a query string to an object.\n *\n * @param {Object} obj Object that should be transformed.\n * @param {String} prefix Optional prefix.\n * @returns {String}\n * @api public\n */ function querystringify(obj, prefix) {\n    prefix = prefix || \"\";\n    var pairs = [], value, key;\n    //\n    // Optionally prefix with a '?' if needed\n    //\n    if (\"string\" !== typeof prefix) prefix = \"?\";\n    for(key in obj){\n        if (has.call(obj, key)) {\n            value = obj[key];\n            //\n            // Edge cases where we actually want to encode the value to an empty\n            // string instead of the stringified value.\n            //\n            if (!value && (value === null || value === undef || isNaN(value))) {\n                value = \"\";\n            }\n            key = encode(key);\n            value = encode(value);\n            //\n            // If we failed to encode the strings, we should bail out as we don't\n            // want to add invalid strings to the query.\n            //\n            if (key === null || value === null) continue;\n            pairs.push(key + \"=\" + value);\n        }\n    }\n    return pairs.length ? prefix + pairs.join(\"&\") : \"\";\n}\n//\n// Expose the module.\n//\nexports.stringify = querystringify;\nexports.parse = querystring;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvcXVlcnlzdHJpbmdpZnkvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxJQUFJQSxNQUFNQyxPQUFPQyxTQUFTLENBQUNDLGNBQWMsRUFDckNDO0FBRUo7Ozs7OztDQU1DLEdBQ0QsU0FBU0MsT0FBT0MsS0FBSztJQUNuQixJQUFJO1FBQ0YsT0FBT0MsbUJBQW1CRCxNQUFNRSxPQUFPLENBQUMsT0FBTztJQUNqRCxFQUFFLE9BQU9DLEdBQUc7UUFDVixPQUFPO0lBQ1Q7QUFDRjtBQUVBOzs7Ozs7Q0FNQyxHQUNELFNBQVNDLE9BQU9KLEtBQUs7SUFDbkIsSUFBSTtRQUNGLE9BQU9LLG1CQUFtQkw7SUFDNUIsRUFBRSxPQUFPRyxHQUFHO1FBQ1YsT0FBTztJQUNUO0FBQ0Y7QUFFQTs7Ozs7O0NBTUMsR0FDRCxTQUFTRyxZQUFZQyxLQUFLO0lBQ3hCLElBQUlDLFNBQVMsd0JBQ1RDLFNBQVMsQ0FBQyxHQUNWQztJQUVKLE1BQU9BLE9BQU9GLE9BQU9HLElBQUksQ0FBQ0osT0FBUTtRQUNoQyxJQUFJSyxNQUFNYixPQUFPVyxJQUFJLENBQUMsRUFBRSxHQUNwQkcsUUFBUWQsT0FBT1csSUFBSSxDQUFDLEVBQUU7UUFFMUIsRUFBRTtRQUNGLHdFQUF3RTtRQUN4RSxzRUFBc0U7UUFDdEUsZ0JBQWdCO1FBQ2hCLEVBQUU7UUFDRixzRUFBc0U7UUFDdEUsbUJBQW1CO1FBQ25CLEVBQUU7UUFDRixJQUFJRSxRQUFRLFFBQVFDLFVBQVUsUUFBUUQsT0FBT0gsUUFBUTtRQUNyREEsTUFBTSxDQUFDRyxJQUFJLEdBQUdDO0lBQ2hCO0lBRUEsT0FBT0o7QUFDVDtBQUVBOzs7Ozs7O0NBT0MsR0FDRCxTQUFTSyxlQUFlQyxHQUFHLEVBQUVDLE1BQU07SUFDakNBLFNBQVNBLFVBQVU7SUFFbkIsSUFBSUMsUUFBUSxFQUFFLEVBQ1ZKLE9BQ0FEO0lBRUosRUFBRTtJQUNGLHlDQUF5QztJQUN6QyxFQUFFO0lBQ0YsSUFBSSxhQUFhLE9BQU9JLFFBQVFBLFNBQVM7SUFFekMsSUFBS0osT0FBT0csSUFBSztRQUNmLElBQUlyQixJQUFJd0IsSUFBSSxDQUFDSCxLQUFLSCxNQUFNO1lBQ3RCQyxRQUFRRSxHQUFHLENBQUNILElBQUk7WUFFaEIsRUFBRTtZQUNGLG9FQUFvRTtZQUNwRSwyQ0FBMkM7WUFDM0MsRUFBRTtZQUNGLElBQUksQ0FBQ0MsU0FBVUEsQ0FBQUEsVUFBVSxRQUFRQSxVQUFVZixTQUFTcUIsTUFBTU4sTUFBSyxHQUFJO2dCQUNqRUEsUUFBUTtZQUNWO1lBRUFELE1BQU1SLE9BQU9RO1lBQ2JDLFFBQVFULE9BQU9TO1lBRWYsRUFBRTtZQUNGLHFFQUFxRTtZQUNyRSw0Q0FBNEM7WUFDNUMsRUFBRTtZQUNGLElBQUlELFFBQVEsUUFBUUMsVUFBVSxNQUFNO1lBQ3BDSSxNQUFNRyxJQUFJLENBQUNSLE1BQUssTUFBS0M7UUFDdkI7SUFDRjtJQUVBLE9BQU9JLE1BQU1JLE1BQU0sR0FBR0wsU0FBU0MsTUFBTUssSUFBSSxDQUFDLE9BQU87QUFDbkQ7QUFFQSxFQUFFO0FBQ0YscUJBQXFCO0FBQ3JCLEVBQUU7QUFDRkMsaUJBQWlCLEdBQUdUO0FBQ3BCUyxhQUFhLEdBQUdqQiIsInNvdXJjZXMiOlsid2VicGFjazovL215LXN0b2NrLWFwcC8uL25vZGVfbW9kdWxlcy9xdWVyeXN0cmluZ2lmeS9pbmRleC5qcz9iYTZmIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIGhhcyA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHlcbiAgLCB1bmRlZjtcblxuLyoqXG4gKiBEZWNvZGUgYSBVUkkgZW5jb2RlZCBzdHJpbmcuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGlucHV0IFRoZSBVUkkgZW5jb2RlZCBzdHJpbmcuXG4gKiBAcmV0dXJucyB7U3RyaW5nfE51bGx9IFRoZSBkZWNvZGVkIHN0cmluZy5cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBkZWNvZGUoaW5wdXQpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KGlucHV0LnJlcGxhY2UoL1xcKy9nLCAnICcpKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG59XG5cbi8qKlxuICogQXR0ZW1wdHMgdG8gZW5jb2RlIGEgZ2l2ZW4gaW5wdXQuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGlucHV0IFRoZSBzdHJpbmcgdGhhdCBuZWVkcyB0byBiZSBlbmNvZGVkLlxuICogQHJldHVybnMge1N0cmluZ3xOdWxsfSBUaGUgZW5jb2RlZCBzdHJpbmcuXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gZW5jb2RlKGlucHV0KSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudChpbnB1dCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxufVxuXG4vKipcbiAqIFNpbXBsZSBxdWVyeSBzdHJpbmcgcGFyc2VyLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBxdWVyeSBUaGUgcXVlcnkgc3RyaW5nIHRoYXQgbmVlZHMgdG8gYmUgcGFyc2VkLlxuICogQHJldHVybnMge09iamVjdH1cbiAqIEBhcGkgcHVibGljXG4gKi9cbmZ1bmN0aW9uIHF1ZXJ5c3RyaW5nKHF1ZXJ5KSB7XG4gIHZhciBwYXJzZXIgPSAvKFtePT8jJl0rKT0/KFteJl0qKS9nXG4gICAgLCByZXN1bHQgPSB7fVxuICAgICwgcGFydDtcblxuICB3aGlsZSAocGFydCA9IHBhcnNlci5leGVjKHF1ZXJ5KSkge1xuICAgIHZhciBrZXkgPSBkZWNvZGUocGFydFsxXSlcbiAgICAgICwgdmFsdWUgPSBkZWNvZGUocGFydFsyXSk7XG5cbiAgICAvL1xuICAgIC8vIFByZXZlbnQgb3ZlcnJpZGluZyBvZiBleGlzdGluZyBwcm9wZXJ0aWVzLiBUaGlzIGVuc3VyZXMgdGhhdCBidWlsZC1pblxuICAgIC8vIG1ldGhvZHMgbGlrZSBgdG9TdHJpbmdgIG9yIF9fcHJvdG9fXyBhcmUgbm90IG92ZXJyaWRlbiBieSBtYWxpY2lvdXNcbiAgICAvLyBxdWVyeXN0cmluZ3MuXG4gICAgLy9cbiAgICAvLyBJbiB0aGUgY2FzZSBpZiBmYWlsZWQgZGVjb2RpbmcsIHdlIHdhbnQgdG8gb21pdCB0aGUga2V5L3ZhbHVlIHBhaXJzXG4gICAgLy8gZnJvbSB0aGUgcmVzdWx0LlxuICAgIC8vXG4gICAgaWYgKGtleSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gbnVsbCB8fCBrZXkgaW4gcmVzdWx0KSBjb250aW51ZTtcbiAgICByZXN1bHRba2V5XSA9IHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBUcmFuc2Zvcm0gYSBxdWVyeSBzdHJpbmcgdG8gYW4gb2JqZWN0LlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmogT2JqZWN0IHRoYXQgc2hvdWxkIGJlIHRyYW5zZm9ybWVkLlxuICogQHBhcmFtIHtTdHJpbmd9IHByZWZpeCBPcHRpb25hbCBwcmVmaXguXG4gKiBAcmV0dXJucyB7U3RyaW5nfVxuICogQGFwaSBwdWJsaWNcbiAqL1xuZnVuY3Rpb24gcXVlcnlzdHJpbmdpZnkob2JqLCBwcmVmaXgpIHtcbiAgcHJlZml4ID0gcHJlZml4IHx8ICcnO1xuXG4gIHZhciBwYWlycyA9IFtdXG4gICAgLCB2YWx1ZVxuICAgICwga2V5O1xuXG4gIC8vXG4gIC8vIE9wdGlvbmFsbHkgcHJlZml4IHdpdGggYSAnPycgaWYgbmVlZGVkXG4gIC8vXG4gIGlmICgnc3RyaW5nJyAhPT0gdHlwZW9mIHByZWZpeCkgcHJlZml4ID0gJz8nO1xuXG4gIGZvciAoa2V5IGluIG9iaikge1xuICAgIGlmIChoYXMuY2FsbChvYmosIGtleSkpIHtcbiAgICAgIHZhbHVlID0gb2JqW2tleV07XG5cbiAgICAgIC8vXG4gICAgICAvLyBFZGdlIGNhc2VzIHdoZXJlIHdlIGFjdHVhbGx5IHdhbnQgdG8gZW5jb2RlIHRoZSB2YWx1ZSB0byBhbiBlbXB0eVxuICAgICAgLy8gc3RyaW5nIGluc3RlYWQgb2YgdGhlIHN0cmluZ2lmaWVkIHZhbHVlLlxuICAgICAgLy9cbiAgICAgIGlmICghdmFsdWUgJiYgKHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB1bmRlZiB8fCBpc05hTih2YWx1ZSkpKSB7XG4gICAgICAgIHZhbHVlID0gJyc7XG4gICAgICB9XG5cbiAgICAgIGtleSA9IGVuY29kZShrZXkpO1xuICAgICAgdmFsdWUgPSBlbmNvZGUodmFsdWUpO1xuXG4gICAgICAvL1xuICAgICAgLy8gSWYgd2UgZmFpbGVkIHRvIGVuY29kZSB0aGUgc3RyaW5ncywgd2Ugc2hvdWxkIGJhaWwgb3V0IGFzIHdlIGRvbid0XG4gICAgICAvLyB3YW50IHRvIGFkZCBpbnZhbGlkIHN0cmluZ3MgdG8gdGhlIHF1ZXJ5LlxuICAgICAgLy9cbiAgICAgIGlmIChrZXkgPT09IG51bGwgfHwgdmFsdWUgPT09IG51bGwpIGNvbnRpbnVlO1xuICAgICAgcGFpcnMucHVzaChrZXkgKyc9JysgdmFsdWUpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBwYWlycy5sZW5ndGggPyBwcmVmaXggKyBwYWlycy5qb2luKCcmJykgOiAnJztcbn1cblxuLy9cbi8vIEV4cG9zZSB0aGUgbW9kdWxlLlxuLy9cbmV4cG9ydHMuc3RyaW5naWZ5ID0gcXVlcnlzdHJpbmdpZnk7XG5leHBvcnRzLnBhcnNlID0gcXVlcnlzdHJpbmc7XG4iXSwibmFtZXMiOlsiaGFzIiwiT2JqZWN0IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJ1bmRlZiIsImRlY29kZSIsImlucHV0IiwiZGVjb2RlVVJJQ29tcG9uZW50IiwicmVwbGFjZSIsImUiLCJlbmNvZGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJxdWVyeXN0cmluZyIsInF1ZXJ5IiwicGFyc2VyIiwicmVzdWx0IiwicGFydCIsImV4ZWMiLCJrZXkiLCJ2YWx1ZSIsInF1ZXJ5c3RyaW5naWZ5Iiwib2JqIiwicHJlZml4IiwicGFpcnMiLCJjYWxsIiwiaXNOYU4iLCJwdXNoIiwibGVuZ3RoIiwiam9pbiIsImV4cG9ydHMiLCJzdHJpbmdpZnkiLCJwYXJzZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/querystringify/index.js\n");

/***/ })

};
;