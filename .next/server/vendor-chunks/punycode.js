"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/punycode";
exports.ids = ["vendor-chunks/punycode"];
exports.modules = {

/***/ "(rsc)/./node_modules/punycode/punycode.es6.js":
/*!***********************************************!*\
  !*** ./node_modules/punycode/punycode.es6.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   decode: () => (/* binding */ decode),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   encode: () => (/* binding */ encode),\n/* harmony export */   toASCII: () => (/* binding */ toASCII),\n/* harmony export */   toUnicode: () => (/* binding */ toUnicode),\n/* harmony export */   ucs2decode: () => (/* binding */ ucs2decode),\n/* harmony export */   ucs2encode: () => (/* binding */ ucs2encode)\n/* harmony export */ });\n\n/** Highest positive signed 32-bit float value */ const maxInt = 2147483647; // aka. 0x7FFFFFFF or 2^31-1\n/** Bootstring parameters */ const base = 36;\nconst tMin = 1;\nconst tMax = 26;\nconst skew = 38;\nconst damp = 700;\nconst initialBias = 72;\nconst initialN = 128; // 0x80\nconst delimiter = \"-\"; // '\\x2D'\n/** Regular expressions */ const regexPunycode = /^xn--/;\nconst regexNonASCII = /[^\\0-\\x7F]/; // Note: U+007F DEL is excluded too.\nconst regexSeparators = /[\\x2E\\u3002\\uFF0E\\uFF61]/g; // RFC 3490 separators\n/** Error messages */ const errors = {\n    \"overflow\": \"Overflow: input needs wider integers to process\",\n    \"not-basic\": \"Illegal input >= 0x80 (not a basic code point)\",\n    \"invalid-input\": \"Invalid input\"\n};\n/** Convenience shortcuts */ const baseMinusTMin = base - tMin;\nconst floor = Math.floor;\nconst stringFromCharCode = String.fromCharCode;\n/*--------------------------------------------------------------------------*/ /**\n * A generic error utility function.\n * @private\n * @param {String} type The error type.\n * @returns {Error} Throws a `RangeError` with the applicable error message.\n */ function error(type) {\n    throw new RangeError(errors[type]);\n}\n/**\n * A generic `Array#map` utility function.\n * @private\n * @param {Array} array The array to iterate over.\n * @param {Function} callback The function that gets called for every array\n * item.\n * @returns {Array} A new array of values returned by the callback function.\n */ function map(array, callback) {\n    const result = [];\n    let length = array.length;\n    while(length--){\n        result[length] = callback(array[length]);\n    }\n    return result;\n}\n/**\n * A simple `Array#map`-like wrapper to work with domain name strings or email\n * addresses.\n * @private\n * @param {String} domain The domain name or email address.\n * @param {Function} callback The function that gets called for every\n * character.\n * @returns {String} A new string of characters returned by the callback\n * function.\n */ function mapDomain(domain, callback) {\n    const parts = domain.split(\"@\");\n    let result = \"\";\n    if (parts.length > 1) {\n        // In email addresses, only the domain name should be punycoded. Leave\n        // the local part (i.e. everything up to `@`) intact.\n        result = parts[0] + \"@\";\n        domain = parts[1];\n    }\n    // Avoid `split(regex)` for IE8 compatibility. See #17.\n    domain = domain.replace(regexSeparators, \".\");\n    const labels = domain.split(\".\");\n    const encoded = map(labels, callback).join(\".\");\n    return result + encoded;\n}\n/**\n * Creates an array containing the numeric code points of each Unicode\n * character in the string. While JavaScript uses UCS-2 internally,\n * this function will convert a pair of surrogate halves (each of which\n * UCS-2 exposes as separate characters) into a single code point,\n * matching UTF-16.\n * @see `punycode.ucs2.encode`\n * @see <https://mathiasbynens.be/notes/javascript-encoding>\n * @memberOf punycode.ucs2\n * @name decode\n * @param {String} string The Unicode input string (UCS-2).\n * @returns {Array} The new array of code points.\n */ function ucs2decode(string) {\n    const output = [];\n    let counter = 0;\n    const length = string.length;\n    while(counter < length){\n        const value = string.charCodeAt(counter++);\n        if (value >= 0xD800 && value <= 0xDBFF && counter < length) {\n            // It's a high surrogate, and there is a next character.\n            const extra = string.charCodeAt(counter++);\n            if ((extra & 0xFC00) == 0xDC00) {\n                output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);\n            } else {\n                // It's an unmatched surrogate; only append this code unit, in case the\n                // next code unit is the high surrogate of a surrogate pair.\n                output.push(value);\n                counter--;\n            }\n        } else {\n            output.push(value);\n        }\n    }\n    return output;\n}\n/**\n * Creates a string based on an array of numeric code points.\n * @see `punycode.ucs2.decode`\n * @memberOf punycode.ucs2\n * @name encode\n * @param {Array} codePoints The array of numeric code points.\n * @returns {String} The new Unicode string (UCS-2).\n */ const ucs2encode = (codePoints)=>String.fromCodePoint(...codePoints);\n/**\n * Converts a basic code point into a digit/integer.\n * @see `digitToBasic()`\n * @private\n * @param {Number} codePoint The basic numeric code point value.\n * @returns {Number} The numeric value of a basic code point (for use in\n * representing integers) in the range `0` to `base - 1`, or `base` if\n * the code point does not represent a value.\n */ const basicToDigit = function(codePoint) {\n    if (codePoint >= 0x30 && codePoint < 0x3A) {\n        return 26 + (codePoint - 0x30);\n    }\n    if (codePoint >= 0x41 && codePoint < 0x5B) {\n        return codePoint - 0x41;\n    }\n    if (codePoint >= 0x61 && codePoint < 0x7B) {\n        return codePoint - 0x61;\n    }\n    return base;\n};\n/**\n * Converts a digit/integer into a basic code point.\n * @see `basicToDigit()`\n * @private\n * @param {Number} digit The numeric value of a basic code point.\n * @returns {Number} The basic code point whose value (when used for\n * representing integers) is `digit`, which needs to be in the range\n * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is\n * used; else, the lowercase form is used. The behavior is undefined\n * if `flag` is non-zero and `digit` has no uppercase form.\n */ const digitToBasic = function(digit, flag) {\n    //  0..25 map to ASCII a..z or A..Z\n    // 26..35 map to ASCII 0..9\n    return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);\n};\n/**\n * Bias adaptation function as per section 3.4 of RFC 3492.\n * https://tools.ietf.org/html/rfc3492#section-3.4\n * @private\n */ const adapt = function(delta, numPoints, firstTime) {\n    let k = 0;\n    delta = firstTime ? floor(delta / damp) : delta >> 1;\n    delta += floor(delta / numPoints);\n    for(; delta > baseMinusTMin * tMax >> 1; k += base){\n        delta = floor(delta / baseMinusTMin);\n    }\n    return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));\n};\n/**\n * Converts a Punycode string of ASCII-only symbols to a string of Unicode\n * symbols.\n * @memberOf punycode\n * @param {String} input The Punycode string of ASCII-only symbols.\n * @returns {String} The resulting string of Unicode symbols.\n */ const decode = function(input) {\n    // Don't use UCS-2.\n    const output = [];\n    const inputLength = input.length;\n    let i = 0;\n    let n = initialN;\n    let bias = initialBias;\n    // Handle the basic code points: let `basic` be the number of input code\n    // points before the last delimiter, or `0` if there is none, then copy\n    // the first basic code points to the output.\n    let basic = input.lastIndexOf(delimiter);\n    if (basic < 0) {\n        basic = 0;\n    }\n    for(let j = 0; j < basic; ++j){\n        // if it's not a basic code point\n        if (input.charCodeAt(j) >= 0x80) {\n            error(\"not-basic\");\n        }\n        output.push(input.charCodeAt(j));\n    }\n    // Main decoding loop: start just after the last delimiter if any basic code\n    // points were copied; start at the beginning otherwise.\n    for(let index = basic > 0 ? basic + 1 : 0; index < inputLength;){\n        // `index` is the index of the next character to be consumed.\n        // Decode a generalized variable-length integer into `delta`,\n        // which gets added to `i`. The overflow checking is easier\n        // if we increase `i` as we go, then subtract off its starting\n        // value at the end to obtain `delta`.\n        const oldi = i;\n        for(let w = 1, k = base;; k += base){\n            if (index >= inputLength) {\n                error(\"invalid-input\");\n            }\n            const digit = basicToDigit(input.charCodeAt(index++));\n            if (digit >= base) {\n                error(\"invalid-input\");\n            }\n            if (digit > floor((maxInt - i) / w)) {\n                error(\"overflow\");\n            }\n            i += digit * w;\n            const t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;\n            if (digit < t) {\n                break;\n            }\n            const baseMinusT = base - t;\n            if (w > floor(maxInt / baseMinusT)) {\n                error(\"overflow\");\n            }\n            w *= baseMinusT;\n        }\n        const out = output.length + 1;\n        bias = adapt(i - oldi, out, oldi == 0);\n        // `i` was supposed to wrap around from `out` to `0`,\n        // incrementing `n` each time, so we'll fix that now:\n        if (floor(i / out) > maxInt - n) {\n            error(\"overflow\");\n        }\n        n += floor(i / out);\n        i %= out;\n        // Insert `n` at position `i` of the output.\n        output.splice(i++, 0, n);\n    }\n    return String.fromCodePoint(...output);\n};\n/**\n * Converts a string of Unicode symbols (e.g. a domain name label) to a\n * Punycode string of ASCII-only symbols.\n * @memberOf punycode\n * @param {String} input The string of Unicode symbols.\n * @returns {String} The resulting Punycode string of ASCII-only symbols.\n */ const encode = function(input) {\n    const output = [];\n    // Convert the input in UCS-2 to an array of Unicode code points.\n    input = ucs2decode(input);\n    // Cache the length.\n    const inputLength = input.length;\n    // Initialize the state.\n    let n = initialN;\n    let delta = 0;\n    let bias = initialBias;\n    // Handle the basic code points.\n    for (const currentValue of input){\n        if (currentValue < 0x80) {\n            output.push(stringFromCharCode(currentValue));\n        }\n    }\n    const basicLength = output.length;\n    let handledCPCount = basicLength;\n    // `handledCPCount` is the number of code points that have been handled;\n    // `basicLength` is the number of basic code points.\n    // Finish the basic string with a delimiter unless it's empty.\n    if (basicLength) {\n        output.push(delimiter);\n    }\n    // Main encoding loop:\n    while(handledCPCount < inputLength){\n        // All non-basic code points < n have been handled already. Find the next\n        // larger one:\n        let m = maxInt;\n        for (const currentValue of input){\n            if (currentValue >= n && currentValue < m) {\n                m = currentValue;\n            }\n        }\n        // Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,\n        // but guard against overflow.\n        const handledCPCountPlusOne = handledCPCount + 1;\n        if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {\n            error(\"overflow\");\n        }\n        delta += (m - n) * handledCPCountPlusOne;\n        n = m;\n        for (const currentValue of input){\n            if (currentValue < n && ++delta > maxInt) {\n                error(\"overflow\");\n            }\n            if (currentValue === n) {\n                // Represent delta as a generalized variable-length integer.\n                let q = delta;\n                for(let k = base;; k += base){\n                    const t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;\n                    if (q < t) {\n                        break;\n                    }\n                    const qMinusT = q - t;\n                    const baseMinusT = base - t;\n                    output.push(stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0)));\n                    q = floor(qMinusT / baseMinusT);\n                }\n                output.push(stringFromCharCode(digitToBasic(q, 0)));\n                bias = adapt(delta, handledCPCountPlusOne, handledCPCount === basicLength);\n                delta = 0;\n                ++handledCPCount;\n            }\n        }\n        ++delta;\n        ++n;\n    }\n    return output.join(\"\");\n};\n/**\n * Converts a Punycode string representing a domain name or an email address\n * to Unicode. Only the Punycoded parts of the input will be converted, i.e.\n * it doesn't matter if you call it on a string that has already been\n * converted to Unicode.\n * @memberOf punycode\n * @param {String} input The Punycoded domain name or email address to\n * convert to Unicode.\n * @returns {String} The Unicode representation of the given Punycode\n * string.\n */ const toUnicode = function(input) {\n    return mapDomain(input, function(string) {\n        return regexPunycode.test(string) ? decode(string.slice(4).toLowerCase()) : string;\n    });\n};\n/**\n * Converts a Unicode string representing a domain name or an email address to\n * Punycode. Only the non-ASCII parts of the domain name will be converted,\n * i.e. it doesn't matter if you call it with a domain that's already in\n * ASCII.\n * @memberOf punycode\n * @param {String} input The domain name or email address to convert, as a\n * Unicode string.\n * @returns {String} The Punycode representation of the given domain name or\n * email address.\n */ const toASCII = function(input) {\n    return mapDomain(input, function(string) {\n        return regexNonASCII.test(string) ? \"xn--\" + encode(string) : string;\n    });\n};\n/*--------------------------------------------------------------------------*/ /** Define the public API */ const punycode = {\n    /**\n\t * A string representing the current Punycode.js version number.\n\t * @memberOf punycode\n\t * @type String\n\t */ \"version\": \"2.3.1\",\n    /**\n\t * An object of methods to convert from JavaScript's internal character\n\t * representation (UCS-2) to Unicode code points, and back.\n\t * @see <https://mathiasbynens.be/notes/javascript-encoding>\n\t * @memberOf punycode\n\t * @type Object\n\t */ \"ucs2\": {\n        \"decode\": ucs2decode,\n        \"encode\": ucs2encode\n    },\n    \"decode\": decode,\n    \"encode\": encode,\n    \"toASCII\": toASCII,\n    \"toUnicode\": toUnicode\n};\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (punycode);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/punycode/punycode.es6.js\n");

/***/ })

};
;